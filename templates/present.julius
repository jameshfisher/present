$(document).ready(function () {

  var levels =
    [ { shuffle: 1, background: "/static/img/backgrounds/romeo/romeo.jpg" }
    , { shuffle: 1, background: "/static/img/backgrounds/me/me.jpg" }
    , { shuffle: 1, background: "/static/img/backgrounds/gandalf/gandalf.jpg" }
    , { shuffle: 1, background: "/static/img/backgrounds/us/us.png" }
    ];

  var currentLevel = 0;
  var numMoves = 0;

  function cloneandPlaySound(jq) {
    jq[0].cloneNode(true).play();
  }

  function playValidMoveSound() {
    cloneandPlaySound($("#validMoveSound"));
  }
  function playInvalidMoveSound() {
    cloneandPlaySound($("#invalidMoveSound"));
  }

  function stopSound(jq) {
    jq[0].pause();
    if (jq[0].currentTime) jq[0].currentTime = 0;
  }

  // finished sound interrupts background sound
  $("#finishedSound").bind("ended pause", function() { $("#finishedSound")[0].currentTime = 0; $("#backgroundSound")[0].play();  });
  $("#finishedSound").bind("play",        function() { stopSound($("#backgroundSound")); });

  function playFinishedSound() {
    console.log("Playing finished sound.");

    $("#finishedSound")[0].play();
  }

  function stopFinishedSound() {
    console.log("Stopping finished sound.");

    stopSound($("#finishedSound"));
  }

  var classNameOf = function(key, el) {
      return el.className.split(/\s+/).filter(function(s) { return s.indexOf(key) == 0; })[0];
  };

  var valsOf = function(key) {
    return function(el) {
      var vals = classNameOf(key, el).split(/\-/).slice(1)
        .map( /* eta conversion necessary for some stupid reason */  function(x) { return parseInt(x) });
      return { x: vals[0], y: vals[1] };
    }
  };

  var posOf = valsOf("pos");
  var tileOf = valsOf("tile");

  var shiftX = function (by) { return function(pos) { return { x: pos.x + by, y: pos.y}; }; };
  var shiftY = function (by) { return function(pos) { return { x: pos.x, y: pos.y + by}; }; };

  var inBounds = function (lo, x, hi) { return lo <= x && x <= hi; };
  var validPos = function (pos) { return inBounds(0, pos.x, 2) && inBounds(0, pos.y, 2); };

  var serializePos = function (pos) { return "pos-" + pos.x + "-" + pos.y; };
  var elAt = function (pos) { return $("." + serializePos(pos)); };

  var empty = function (pos) { return elAt(pos).size() == 0; };

  var possibleMoves = function (pos) {
    return [shiftX(-1), shiftX(1), shiftY(-1), shiftY(1)].map(function(f) { return f(pos); }).filter(validPos).filter(empty);
  };

  /* what tedium */
  var pointEqual = function(a,b) { return a.x == b.x && a.y == b.y; }
  var rightPlace = function(el) { return pointEqual(posOf(el), tileOf(el)); };
  var done = function() { return _.all($(".piece"), rightPlace); };

  var markCanMove = function() {
    console.log("Marking pieces that can move.");
    $(".piece").map(function(_, el) {
      if (possibleMoves(posOf(el)).length > 0) { $(el).addClass("can-move"); }
      else { $(el).removeClass("can-move"); }
    });
  };

  var markCorrect = function() {
    console.log("Marking correct pieces.");
    $(".piece").map(function(_, el) {
      if (rightPlace(el)) { $(el).addClass("correct-position"); }
      else { $(el).removeClass("correct-position"); }
    });
  };

  $("#finishedSound").bind("ended", function() { startLevel(++currentLevel) });

  var markFinished = function() {
    console.log("Marking whether finished.");
    if (done()) {
      $("body").addClass("finished");
      playFinishedSound();
    }
    else {
      $("body").removeClass("finished");
      stopFinishedSound();
    };
  };

  var update = function() {
    console.log("Updating UI:");
    markFinished();
    markCanMove();
    markCorrect();
  };

  var moveTo = function (pos, el) {
    console.log("Moving ", el, " to ", pos, ".");
    $(el).removeClass(classNameOf("pos", el));
    $(el).addClass(serializePos(pos));
  };

  var tryMove = function(el) {
    console.log("Trying to move ", el, ".");
    var possible = possibleMoves(posOf(el));
    if (possible.length > 0) { moveTo(possible[0], el); }
    return possible.length > 0;
  };

  $(".piece").click(function() {
    console.log("Piece clicked.");
    if (tryMove(this)) {
      playValidMoveSound();
      update();
      $(".current-moves").text(++numMoves);
    }
    else {
      console.log("Invalid move.");
      playInvalidMoveSound();
    }
  });

  var randFrom = function(arr) {
    return arr[Math.floor(Math.random() * arr.length)];
  };

  var shuffle = function(n) {
    console.log("Shuffling ", n, " pieces.");
    var pieces = $(".piece");
    while (n > 0) if (tryMove(randFrom(pieces))) n--;
  };

  var startLevel = function(n) {
    console.log("Starting level ", n, ".");

    $("body").removeClass("finished");

    n = Math.min(n, levels.length-1);
    var level = levels[n];

    numMoves = 0;

    $(".current-level").text(n+1);
    shuffle(level.shuffle);
    $(".piece").css("background-image", "url(" + level.background + ")");
  };

  startLevel(0);

  $(".wrapping").click(function() {
    console.log("Unwrapping.");
    var el = $(this);
    el.css("opacity", "0");
    setTimeout(function() { el.remove(); }, 1000);
  });
});